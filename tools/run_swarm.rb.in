#!/usr/bin/env ruby

$LOAD_PATH.push("@CMAKE_INSTALL_PREFIX@/@RUBY_INSTALL_DIR@/swarm")

# $ gem install protobuf
require 'protobuf'
require '@CMAKE_INSTALL_PREFIX@/@RUBY_INSTALL_DIR@/swarm/log_entry.pb'
require '@CMAKE_INSTALL_PREFIX@/@RUBY_INSTALL_DIR@/swarm/log_header.pb'

require 'timeout'
require 'fileutils'
require 'optparse'
require 'json'
require 'nokogiri'
require 'base64'
require 'zlib'

# $ sudo apt-get install ruby-dev
# $ gem install rest-client
require 'rest-client'

# $ gem install parallel
require 'parallel'

$latexTemplate = %q{
\documentclass{article}

\usepackage{graphicx} % Required for the inclusion of images
\usepackage{amsmath} % Required for some math elements
\usepackage{subfigure}
\usepackage{geometry}
  \geometry{
  left=20mm,
  right=20mm,
  top=20mm,
}

\setlength\parindent{0pt} % Removes all indentation from paragraphs

\renewcommand{\labelenumi}{\alph{enumi}.} % Make numbering in the enumerate environment by letter rather than number (e.g. section 6)

\input{swarm_summary}

\title{Swarm experiment report} % Title

\author{\textsc{Open Source Robotics Foundation}} % Author name

\date{\today} % Date for the report

\begin{document}

\maketitle % Insert the title, author and date

\section*{Configuration}

\begin{tabular}{ll}
Team                           & \swarmTeamName\\\\
Number of ground vehicles      & \swarmNumGroundVehicles\\\\
Number of fixed wing vehicles  & \swarmNumFixedVehicles\\\\
Number of rotor craft vehicles & \swarmNumRotorVehicles\\\\
Terrain name                   & \swarmTerrainName\\\\
Vegetation name                & \swarmVegetationName\\\\
Search area                    & \swarmSearchArea\\\\
\end{tabular}


\section*{Completion}

\begin{tabular}{ll}
Success                                     & \swarmSucceed\\\\
Number of incorrect reports                 & \swarmWrongBooReports\\\\
Maximum number of incorrect reports allowed & \swarmMaxWrongReports\\\\
Duration                                    & \swarmDuration ~seconds\\\\
Maximum duration allowed                    & \swarmMaxDuration ~seconds\\\\
Score                                       & \swarmScore\\\\
\end{tabular}

The score is calculated using the following equation: \\

\begin{center}
$score=0.8\cdot(1.0-min(1.0,~\frac{duration}{duration_{max}}))+0.2\cdot(1.0-min(1.0, ~\frac{incorrectReports}{incorrectReports_{max}}))$
\end{center}

\section*{Communications}

\begin{tabular}{ll}
Number of messages sent               & \swarmNumMsgsSent\\\\
Number of unicast messages sent       & \swarmNumUnicastSent\\\\
Number of broadcast messages sent     & \swarmNumBroadcastSent\\\\
Number of multicast messages sent     & \swarmNumMulticastSent\\\\
Average message publication frequency & \swarmFreqMsgsSent ~messages per second\\\\
Average percentage message drop       & \swarmAvgMsgsDrop ~\%\\\\
Average data rate per robot           & \swarmAvgDataRateRobot ~mbps\\\\
Average number of neighbors per robot & \swarmAvgNeighborsRobot\\\\
\end{tabular}

\begin{figure}[ht]
  \centering
  \includegraphics[width=\columnwidth, keepaspectratio]{swarm_msgs_sent}
  \label{fig:subfig5}
\end{figure}

\begin{figure}[ht]
  \centering
  \includegraphics[width=\columnwidth, keepaspectratio]{swarm_comms_drops}
  \label{fig:subfig6}
\end{figure}

\begin{figure}[ht]
  \centering
  \includegraphics[width=\columnwidth, keepaspectratio]{swarm_comms_datarate}
  \label{fig:subfig7}
\end{figure}

\begin{figure}[ht]
  \centering
  \includegraphics[width=\columnwidth, keepaspectratio]{swarm_comms_neighbors}
  \label{fig:subfig8}
\end{figure}

\end{document}
}

###############################################
# \brief A class that parses a log file.
class LogParser
  include Enumerable

  #################################################
  # Constructor
  def initialize(_logFile)

    # Get the log timestamp from the directory name.
    fileParts = _logFile.split("/")
    time = Time.parse(fileParts[fileParts.length - 2])
    @timestamp = time.to_i

    @logFile = _logFile
    @file = File.open(@logFile, 'rb')
    @header = nil
    @timeStep = 0.1

    @duration = 0
    @wrongBooReports = 0
    @succeed = false

    @totalMsgsSent = 0
    @totalMsgsUnicast = 0
    @totalMsgsBroadcast = 0
    @totalMsgsMulticast = 0
    @totalMsgsSentFreq = 0

    @counterMsgsSentFreq = 0
    @totalDropRatio = 0
    @counterDropRatio = 0
    @totalDataRate = 0
    @counterDataRate = 0
    @totalNeighbors = 0
    @counterTotalNeighbors = 0
  end

  #################################################
  # Get the next message in a log file, or nil if
  # the end of file is reached
  def nextMsg
    # Read the 4-byte header
    sizeString = @file.read(4)
    if sizeString.nil? || sizeString.length < 4
      @file.close
      return nil
    end

    # Get the message size
    size = sizeString.unpack('<I')[0]

    # Read the message, in binary
    msg = @file.read(size)

    # Make a protobuf message out of it
    # The first message in the log is a LogHeader; the rest are LogEntry
    if @header.nil?
      @header = Swarm::Msgs::LogHeader.new
      @header.decode(msg)
      if @header.field?(:time_step)
        @timeStep = @header.time_step
      end

      # Use a timestamp from the log header, if present
      if @header.field?(:timestamp)
        @timestamp = @header.timestamp
      end

      # Return the next actual message
      return nextMsg
    end

    pbmsg = Swarm::Msgs::LogEntry.new
    pbmsg.decode(msg)

    return pbmsg
  end

  ###############################################
  # Convert swarm comms log file to csv and zipped json files
  def to_comms(_csvFile, _jsonFile)
    csvFile = File.open(_csvFile, 'w')
    csvFile.print "# time, msg_sent, msg_freq, num_unicast, num_broadcast, num_multicast, potential_recipients, msgs_delivered, drop_ratio, bytes_sent, data_rate, avg_num_neighbors\n"

    json = []

    modelMapping = {}

    # Process each message in the logfile
    self.each do |entry|
      modelMapping[entry.id] = entry.model_name

      # Check for the 'incoming_msgs' field,
      # which tells us about what happened to
      # messages that were sent
      if entry.field?(:incoming_msgs) and entry.field?(:time) and
         entry.field?(:visibility)
        entryData = {
          :time => entry.time.to_f,
          :msg_sent => 0,
          :num_unicast => 0,
          :num_broadcast => 0,
          :num_multicast => 0,
          :msg_freq => 0,
          :potential_recipients => 0,
          :msgs_delivered => 0,
          :drop_ratio => 0,
          :bytes_sent => 0,
          :data_rate => 0,
          :avg_neighbors => 0,
          :msgs => []
        }

        numRobots = 0
        numNeighbors = 0

        entry.incoming_msgs.message.each do |msg|
          # puts "#{msg.src_address} == #{modelMapping[msg.src_address]}"
          if msg.dst_address == 'broadcast'
            entryData[:num_broadcast] += 1
          elsif msg.dst_address == 'multicast'
            entryData[:num_multicast] += 1
          else
            entryData[:num_unicast] += 1
          end

          dsts = []
          entryData[:msg_sent] += 1
          entryData[:bytes_sent] += msg.size + 56
          msg.neighbor.each do |neighbor|
            entryData[:potential_recipients] += 1
            if neighbor.status == Swarm::Msgs::CommsStatus::DELIVERED
              dsts.push(modelMapping[neighbor.dst])
              entryData[:msgs_delivered] += 1
            end
          end
          entryData[:msgs].push([modelMapping[msg.src_address], dsts])
        end

        entry.visibility.row.each do |msg|
          if msg.src == 'boo'
            next
          end

          numRobots += 1
          msg.entry.each do |neighbor|
            if neighbor.status == 1
              numNeighbors += 1
            end
          end
        end

        if numRobots > 0
          entryData[:avg_neighbors] = numNeighbors / numRobots.to_f
        end

        entryData[:msg_freq] = entryData[:msg_sent] / @timeStep
        entryData[:data_rate] = (entryData[:bytes_sent] * 8) / @timeStep

        if entryData[:potential_recipients] > 0
          entryData[:drop_ratio] = (entryData[:potential_recipients] -
            entryData[:msgs_delivered])/entryData[:potential_recipients].to_f
        end

        json.push(entryData)

        csvFile.print "%f,%d,%f,%d,%d,%d,%d,%d,%f,%d,%f,%f\n" %
            [entryData[:time], entryData[:msg_sent], entryData[:msg_freq],
             entryData[:num_unicast], entryData[:num_broadcast],
             entryData[:num_multicast], entryData[:potential_recipients],
             entryData[:msgs_delivered], entryData[:drop_ratio],
             entryData[:bytes_sent], entryData[:data_rate],
             entryData[:avg_neighbors]]

        # Update global variables.
        @totalMsgsSent += entryData[:msg_sent]
        @totalMsgsUnicast += entryData[:num_unicast]
        @totalMsgsBroadcast += entryData[:num_broadcast]
        @totalMsgsMulticast += entryData[:num_multicast]
        @totalMsgsSentFreq += entryData[:msg_freq]

        @counterMsgsSentFreq += 1
        @totalDropRatio += entryData[:drop_ratio]
        @counterDropRatio += 1
        @totalDataRate += entryData[:data_rate]
        @counterDataRate += 1
        @totalNeighbors += entryData[:avg_neighbors]
        @counterTotalNeighbors += 1
      end

      entry.boo_report.each do |booReport|
        if booReport.succeed
          @succeed = true
        else
          @wrongBooReports += 1
        end
      end

      if !@succeed
        @duration = entry.time
      end
    end
    csvFile.close

    z = Zlib::Deflate.new
    deflated = z.deflate(json.to_json.to_s, Zlib::FINISH)
    z.close
    
    # Write compressed file
    File.open(_jsonFile, 'w') do |file|
      file.write(deflated)
    end
  end

  ###############################################
  # Output a score
  def score(_duration, _maxDuration, _wrongReports, _maxWrongReports)

    # Duration
    a = 0.8 * (1.0 - [1.0, _duration / _maxDuration].min)

    # Wrong reports.
    b = 0.2 * (1.0 - [1.0, _wrongReports / _maxWrongReports].min)

    return a + b;
  end


  ###############################################
  # Output a summary report. Make sure to run to_comms first.
  def to_summary(_texFile, _jsonFile)
    if @counterMsgsSentFreq != 0
      avgMsgsSentFreq = @totalMsgsSentFreq / @counterMsgsSentFreq
    else
      avgMsgsSentFreq = 0
    end

    if @counterDropRatio != 0
      avgDropRatio = 100.0 * @totalDropRatio / @counterDropRatio
    else
      avgDropRatio = 0
    end

    # mbps.
    if @counterDataRate != 0
      avgDataRate = 0.000001 * @totalDataRate / @counterDataRate
    else
      avgDataRate = 0
    end

    if @counterTotalNeighbors != 0
      avgNeighbors = @totalNeighbors / @counterTotalNeighbors
    else
      avgNeighbors = 0
    end

    texFd = File.open(_texFile, "wb")
    jsonFd = File.open(_jsonFile, "wb")

    teamName = 'Unknown'
    numGround = 'Unknown'
    numFixed = 'Unknown'
    numRotor = 'Unknown'
    terrainName = 'Unknown'
    vegetationName = 'Unknown'
    searchArea = 'Unknown'

    # Environment.
    if @header and @header.field?(:team_name)
      teamName = @header.team_name
      # Escape '_' to make latex happy.
      teamName = teamName.gsub('_', '\_')
    end

    jsonFd.write("{")
    jsonFd.write("\"timestamp\" : #{@timestamp},")
    texFd.write("\\newcommand{\\swarmTeamName}{#{teamName}}\n")
    jsonFd.write("\"team\" : \"#{teamName}\",")

    if @header and @header.field?(:num_ground_vehicles)
      numGround = @header.num_ground_vehicles
    end
    texFd.write("\\newcommand{\\swarmNumGroundVehicles}{#{numGround}}\n")
    jsonFd.write("\"ground_vehicles\" : #{numGround},")

    if @header and @header.field?(:num_fixed_vehicles)
      numFixed = @header.num_fixed_vehicles
    end
    texFd.write("\\newcommand{\\swarmNumFixedVehicles}{#{numFixed}}\n")
    jsonFd.write("\"fixed_vehicles\" : #{numFixed},")

    if @header and @header.field?(:num_rotor_vehicles)
      numRotor = @header.num_rotor_vehicles
    end
    texFd.write("\\newcommand{\\swarmNumRotorVehicles}{#{numRotor}}\n")
    jsonFd.write("\"rotor_vehicles\" : #{numRotor},")

    if @header and @header.field?(:terrain_name)
      terrainName = @header.terrain_name
      jsonFd.write("\"terrain\" : \"#{terrainName}\",")
      # Escape '_' to make latex happy.
      terrainName = terrainName.gsub('_', '\_')
    end
    texFd.write("\\newcommand{\\swarmTerrainName}{#{terrainName}}\n")

    if @header and @header.field?(:vegetation_name)
      vegetationName = @header.vegetation_name
      jsonFd.write("\"vegetation\" : \"#{vegetationName}\",")
      # Escape '_' to make latex happy.
      vegetationName = vegetationName.gsub('_', '\_')
    end
    texFd.write("\\newcommand{\\swarmVegetationName}{#{vegetationName}}\n")

    if @header and @header.field?(:search_area)
      searchArea = @header.search_area
      jsonFd.write("\"search_area\" : \"#{searchArea}\",")
      # Escape '_' to make latex happy.
      searchArea = searchArea.gsub('_', '\_')
    end
    texFd.write("\\newcommand{\\swarmSearchArea}{#{searchArea}}\n")

    # Completion.
    totalScore = 0.0
    maxDuration = 7200
    maxWrongReports = 20
    if @succeed
      totalScore = score(@duration, maxDuration, @wrongBooReports,
                         maxWrongReports)
      texFd.write("\\newcommand{\\swarmSucceed}{Yes}\n")
      jsonFd.write("\"success\" : true,")
    else
      texFd.write("\\newcommand{\\swarmSucceed}{No}\n")
      jsonFd.write("\"success\" : false,")
    end

    texFd.write("\\newcommand{\\swarmWrongBooReports}{#{@wrongBooReports}}\n")
    jsonFd.write("\"incorrect_reports\" : #{@wrongBooReports},")

    texFd.write("\\newcommand{\\swarmDuration}{#{@duration}}\n")
    jsonFd.write("\"duration\" : #{@duration},")

    if @header.field?(:max_time_allowed)
      maxDuration = @header.max_time_allowed
    else
      print "Warning: <max_time_allowed> not present in log file.\n"
    end

    if @header.field?(:max_wrong_reports)
      maxWrongReports = @header.max_wrong_reports
    else
      print "Warning: <max_wrong_reports> not present in log file.\n"
    end

    texFd.write("\\newcommand{\\swarmScore}{#{totalScore}}\n")
    jsonFd.write("\"score\" : #{totalScore},")


    # Comms summary.
    texFd.write("\\newcommand{\\swarmNumMsgsSent}{#{@totalMsgsSent}}\n")
    jsonFd.write("\"messages_sent\" : #{@totalMsgsSent},")

    texFd.write("\\newcommand{\\swarmNumUnicastSent}{#{@totalMsgsUnicast}}\n")
    jsonFd.write("\"unicast_sent\" : #{@totalMsgsUnicast},")

    texFd.write("\\newcommand{\\swarmNumBroadcastSent}{#{@totalMsgsBroadcast}}\n")
    jsonFd.write("\"broadcast_sent\" : #{@totalMsgsBroadcast},")

    texFd.write("\\newcommand{\\swarmNumMulticastSent}{#{@totalMsgsMulticast}}\n")
    jsonFd.write("\"multicast_sent\" : #{@totalMsgsMulticast},")

    texFd.write("\\newcommand{\\swarmFreqMsgsSent}{#{avgMsgsSentFreq}}\n")
    jsonFd.write("\"avg_pub_freq\" : #{avgMsgsSentFreq},")

    texFd.write("\\newcommand{\\swarmAvgMsgsDrop}{#{avgDropRatio}}\n")
    jsonFd.write("\"avg_percent_drop\" : #{avgDropRatio},")

    texFd.write("\\newcommand{\\swarmAvgDataRateRobot}{#{avgDataRate}}\n")
    jsonFd.write("\"avg_data_rate_per_robot\" : #{avgDataRate},")

    texFd.write("\\newcommand{\\swarmAvgNeighborsRobot}{#{avgNeighbors}}\n")
    jsonFd.write("\"avg_neighbors_per_robot\" : #{avgNeighbors},")

    texFd.write("\\newcommand{\\swarmMaxDuration}{#{maxDuration}}\n")
    jsonFd.write("\"max_duration\" : #{maxDuration},")

    texFd.write("\\newcommand{\\swarmMaxWrongReports}{#{maxWrongReports}}\n")
    jsonFd.write("\"max_wrong_reports\" : #{maxWrongReports}")
    jsonFd.write("}")

    texFd.close()
    jsonFd.close()
  end

  ###############################################
  # Implement an 'each' method
  def each
    while true do
      msg = nextMsg
      if msg.nil?
        break
      end
      yield msg
    end
  end
end

###############################################
# \brief A class that runs swarm tests.
class Runner
  @@worldPrefix = "worlds/final_01"
  @@searchAreas = [2, 10, 20]
  @@vehicleCounts = [10, 25, 50, 100, 200, 400, 800]
  @@densities = [0, 1, 2]
  @@densityStrings = ["low", "medium", "high"]

  ###############################################
  # \brief Initialize the runner with options from the command line
  def initialize(options)
    @jobs = options[:jobs]

    @minSearch =  options[:minSearch]
    @maxSearch =  options[:maxSearch]

    @minVehicle = options[:minVehicle]
    @maxVehicle = options[:maxVehicle]

    @minDensity = options[:minDensity]
    @maxDensity = options[:maxDensity]
    @clearLogs = options[:clear]

    @timeout = options[:timeout]
    @team = options[:team]
    @reps = options[:reps]

    @dir = options[:dir]
    @pass = options[:pass]

    if options.has_key?(:reports)
      generate_reports(options[:reports])
    elsif options.has_key?(:filter)
      filter_gazebo_logs(options[:filter])
    elsif options.has_key?(:upload)
      if options.has_key?(:pass)
        upload_reports(options[:upload], options[:pass])
      else
        puts "Error: Missing passcode for upload"
      end
    else
      run_tests
    end
  end

  ###############################################
  # Upload the reports to the gazebo web server
  def upload_reports(_dir, _pass)
    gazeboDirs = Dir.entries(File.join(_dir, "gazebo")).select{ |entry|
      File.directory?(File.join(_dir, "gazebo", entry)) && entry != '.' && entry != '..'
    }.sort


    # Get an array of all the swarm reports
    swarmDirs = Dir.entries(File.join(_dir, "swarm")).select{ |entry|
      File.directory?(File.join(_dir, "swarm", entry)) && entry != '.' && entry != '..'
    }.sort
    

    # combine the swarm and gazebo logs
    reports = swarmDirs.collect.each.with_index{ |entry, index|
      {:swarm => File.join(_dir, "swarm", entry),
       :gazebo => File.join(_dir, "gazebo", gazeboDirs[index])}
    }

    puts "Upload reports for #{_dir}"
    reports.each_with_index do |report, index|
      puts "Upload #{index}"

      jsonFilename = File.join(report[:swarm], "summary.json")
      commsFilename = File.join(report[:swarm], "swarm_comms.json.zip")
      logFilename = File.join(report[:gazebo], "gzserver", "filtered.json.zip")

      if !File.exist?(jsonFilename)
        puts "Error: JSON Summary file doesn't exist: #{jsonFilename}"
        next
      end

      if !File.exist?(commsFilename)
        puts "Error: Comms file doesn't exist: #{commsFilename}"
        next
      end

      if !File.exist?(logFilename)
        puts "Error: Filtered log file doesn't exist: #{logFilename}"
        next
      end

      summaryData = File.read(jsonFilename)
      RestClient::Request.execute(:method => :post,
                         :url =>'http://swarm.gazebosim.org/swarm/result',
                         :timeout => 90000000,
                         :payload => {
                           :pass => _pass,
                           :result => JSON.parse(summaryData),
                           :upload => { :comms => File.new(commsFilename, "rb"),
                                        :log => File.new(logFilename, "rb")
                         }
      })
    end
  end

  ###############################################
  # Generate all the runs based on the provided parameters
  def generate_runs
    port = 11345
    @runs = []

    # Create all the runs. The outer loop is the number of repetitions to
    # perform each run
    @reps.times do

      # Iterate over the search areas
      @@searchAreas.each do |searchArea|
        if searchArea < @minSearch || searchArea > @maxSearch
          next
        end

        # Iterate over the densities
        @@densities.each do |density|
          if density < @minDensity || density > @maxDensity
            next
          end

          # Iterate over the vehicle counts
          @@vehicleCounts.each do |vehicleCount|
            if vehicleCount < @minVehicle || vehicleCount > @maxVehicle
              next
            end

            # Generate the shell command
            world = "#{@@worldPrefix}_#{searchArea.to_s.rjust(2, '0')}_" +
                    "#{@@densityStrings[density]}_#{vehicleCount}.world"
            @runs.push("SWARM_LOG=1 SWARM_TEAMNAME=#{@team} " +
                       "GAZEBO_MASTER_URI=http://localhost:#{port} " +
                       "gzserver -r #{world}")
            port += 1
          end
        end
      end
    end
  end

  ###############################################
  # \brief Run all the tests
  def run_tests

    generate_runs

    # Output some useful information
    puts "Parameters:"
    puts "--------------------------------------------------"
    puts " Search area range: #{@minSearch} - #{@maxSearch}"
    puts " Vehicle range:     #{@minVehicle} - #{@maxVehicle}"
    puts " Density range:     #{@minDensity} - #{@maxDensity}"
    puts " Timeout:           #{@timeout}"
    puts " Clear logs:        #{@clearLogs ? "true" : "false"}"
    puts " Processes:         #{@jobs}"
    puts " Output dir:        #{@dir}"
    puts " Team:              #{@team}"
    puts " Repetitions:       #{@reps}"
    puts "--------------------------------------------------"
    puts
    puts "Tests to run:"
    puts @runs
    puts

    # Ask before proceeding
    print "Run tests ? (y/N) "
    ans = gets.chomp
    if ans != 'y' && ans != 'Y'
      return
    end

    # Get the current time.
    time = Time.now.strftime("%Y-%m-%dT%H:%M:%S")

    # Clear the log directories, if specified on the command line.
    if @clearLogs
      puts "Clearing logs"
      FileUtils.rm_rf("#{ENV['HOME']}/.swarm/log")
      FileUtils.rm_rf("#{ENV['HOME']}/.gazebo/log")
    end

    puts "Starting tests..."

    # Run the tests in different processes
    Parallel.map(@runs, :in_processes => @jobs) do |run|
      puts "Running test: #{run}"

       # Spawn the job
       pid = Process.spawn(run, {[:err,:out] => :close, :pgroup => true})
       begin
         Timeout.timeout(@timeout) do
           Process.waitpid(pid, 0)
         end
       rescue Timeout::Error
         Process.kill(15, -Process.getpgid(pid))
       end
    end

    # Gather log files into common location
    FileUtils.mkdir("#{@dir}/#{time}")
    FileUtils.cp_r("#{ENV['HOME']}/.swarm/log", "#{@dir}/#{time}/swarm")
    FileUtils.cp_r("#{ENV['HOME']}/.gazebo/log", "#{@dir}/#{time}/gazebo")

    # Generate the reports
    generate_reports("#{@dir}/#{time}")

    filter_gazebo_logs("#{@dir}/#{time}")

    # Upload the reports
    upload_reports("#{@dir}/#{time}", @pass)
  end

  #################################################
  # Filter gazebo logs
  def filter_gazebo_logs(_path)

    # Get an array of all the logs to generate
    reports = Dir.entries(File.join(_path, 'gazebo')).select{ |entry|
      File.directory?(File.join(_path, 'gazebo', entry)) && entry != '.' && entry != '..'
    }.collect{ |entry|
      File.join(_path, 'gazebo', entry)
    }

    puts "Filter logs for:\n"
    puts reports

    reports.each do |report|
      stateLog = "#{report}/gzserver/state.log"
      if !File.exist?(stateLog)
        puts "Error, missing log: #{stateLog}"
        next
      end

      # Read the log data
      doc = Nokogiri::XML(File.read(stateLog))

      # Get all the chunks
      chunks = doc.xpath("//chunk")

      result = []

      # Process each chunk
      chunks.each do |chunk|
        # Get the cdata
        cdata = chunk.children.find{|e| e.cdata?}

        if cdata.nil?
          next
        end

        # Decode from base64
        binary = Base64.decode64(cdata.content)

        # Inflate from zlib
        raw = Zlib::Inflate.new.inflate(binary)

        types = ["ground", "fixed", "rotor"]

        # There are multiple <sdf> states in one chunk. So, process each <sdf
        raw.split("<sdf ").each do |sdf|
          if sdf.empty?
            next
          end

          # Read the SDF
          chunkXml = Nokogiri::XML("<sdf " + sdf)

          # Get the simulation time
          simTimeXml = chunkXml.xpath("//sim_time/text()").first
          simTime = 0.0
          if !simTimeXml.nil?
            parts = simTimeXml.content.split(" ")
            simTime = parts[0].to_f + parts[1].to_f * 1e-9
          end

          # Create new element in database
          #swarmPos = swarm.swarm_positions.new({:time => simTime})
          iter = {:time => simTime, :name=>[], :type => [], :pos => []}

          # Process each type of vehicles
          types.each_with_index do |vehicleType, index|

            # Get all the vehicles of a type
            searchString = "//model[starts-with(@name,'#{vehicleType}')]"
            chunkXml.xpath(searchString).each do |vehicle|
              # Name of the vehicle
              name = vehicle.xpath("./@name").first.content.inspect

              # Position of the vehicle
              posXML = vehicle.xpath("./pose/text()")
              pos = [0.0, 0.0]
              if !posXML.nil? and !posXML.first.nil?
                pos = posXML.first.content.split(" ")[0..1].collect { |p| p.to_f}
              end

              # Save the data
              iter[:name].push(name.gsub!(/\A"|"\Z/, ''))
              iter[:type].push(index)
              iter[:pos].push(pos)
            end
          end

          # Get the lost person
          searchString = "//model[starts-with(@name,'lost_person')]/pose/text()"
          posXML = chunkXml.xpath(searchString).first
          pos = [0.0, 0.0]
          if !posXML.nil? and !posXML.content.nil?
            pos = posXML.content.split(" ")[0..1].collect { |p| p.to_f}
          end

          # Save the data
          iter[:lost_person_x] = pos[0]
          iter[:lost_person_y] = pos[1]

          result.push(iter)
        end
      end

      z = Zlib::Deflate.new
      deflated = z.deflate(result.to_json.to_s, Zlib::FINISH)
      z.close
    
      # Write compressed file
      File.open("#{report}/gzserver/filtered.json.zip", 'w') do |file|
        file.write(deflated)
      end
    end
  end

  #################################################
  # Generate report for all directories in _path
  def generate_reports(_path)
    # Plots to output
    plots = ["swarm_comms_msgs_sent.gplot",
             "swarm_comms_drops.gplot",
             "swarm_comms_datarate.gplot",
             "swarm_comms_neighbors.gplot"]

    # Get an array of all the reports to generate
    reports = Dir.entries(File.join(_path, "swarm")).select{ |entry|
      File.directory?(File.join(_path, "swarm", entry)) && entry != '.' && entry != '..'
    }.collect{ |entry|
      File.join(_path, "swarm", entry)
    }

    puts "Generate reports for:\n"
    puts reports

    # Generate reports in different processes
    Parallel.map(reports, :in_processes => @jobs) do |report|
      puts "Generating #{report}"
      swarmLog = "#{report}/swarm.log"
      swarmSummaryTex = "#{report}/swarm_summary.tex"
      swarmCSV = "#{report}/swarm.csv"
      swarmJson = "#{report}/swarm_comms.json.zip"
      swarmSummaryJson = "#{report}/summary.json"

      parser = LogParser.new(swarmLog)

      # Step 1: Create csv file
      parser.to_comms(swarmCSV, swarmJson)

      # Step 2: Create the summary files
      parser.to_summary(swarmSummaryTex, swarmSummaryJson)

      # Step 3: Generate images
      plots.each do |plot|
        `output_dir=#{report} logfile=#{swarmCSV} #{plot}`
      end

      # Step 4: Generate final report
      File.open("#{report}/report.tex", 'w') {|file|
        file.write($latexTemplate)
      }
      Dir.chdir(report) {
        `pdflatex #{report}/report.tex`
      }
    end
  end
end

#################################################
# Main
if __FILE__ == $0

  # Default options
  options = {:minSearch => 0,  :maxSearch => 20,
             :minVehicle => 0, :maxVehicle => 50,
             :minDensity => 0, :maxDensity => 2,
             :clear => false, :timeout => 3600, :jobs => 1,
             :dir => "/tmp", :team => "OSRF", :reps => 1, :pass => ""}

  # Process command line options
  OptionParser.new do |opts|
    opts.banner = "Usage: run_swarm.rb [options]"

    opts.on("-c", "--clear-logs", "Clear log directory") do |n|
      options[:clear] = n
    end

    opts.on("-t N", "--timeout N", Integer, "Timeout in seconds") do |n|
      options[:timeout] = n
    end

    opts.on("--min-search N", Integer, "Min search area") do |n|
      options[:minSearch] = n
    end

    opts.on("--max-search N", Integer, "Max search area") do |n|
      options[:maxSearch] = n
    end

    opts.on("--min-vehicles N", Integer, "Min vehicle count") do |n|
      options[:minVehicle] = n
    end

    opts.on("--max-vehicles N", Integer, "Min vehicle count") do |n|
      options[:maxVehicle] = n
    end

    opts.on("--min-density N", Integer, "Min density") do |n|
      options[:minDensity] = n
    end

    opts.on("--max-density N", Integer, "Max density") do |n|
      options[:maxDensity] = n
    end

    opts.on("-j N", "--jobs N", Integer, "Number of processes to use") do |n|
      options[:jobs] = n
    end

    opts.on("-d DIR", "--out-dir DIR", String, "Directory to store logs") do |n|
      options[:dir] = n
    end

    opts.on("--team TEAM", String, "Team name") do |n|
      options[:team] = n
    end

    opts.on("-r N", "--reps N", Integer, "Number of repetitions") do |n|
      options[:reps] = n
    end

    opts.on("-g DIR", "--generate-reports DIR", String,
            "Generate reports for a directory") do |n|
      options[:reports] = n
    end

    opts.on("-f DIR", "--filter DIR", String,
            "Filter gazebo logs for a directory") do |n|
      options[:filter] = n
    end

    opts.on("-u DIR", "--upload-reports DIR", String,
            "Upload reports for a directory") do |n|
      options[:upload] = n
    end

    opts.on("-p PASS", "--passcode PASS", String,
            "Passcode for upload reports") do |n|
      options[:pass] = n
    end

  end.parse!

  # Create the runner
  runner = Runner.new(options)
end
